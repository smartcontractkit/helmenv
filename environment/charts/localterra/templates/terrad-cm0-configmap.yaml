apiVersion: v1
data:
  addrbook.json: |-
    {
    	"key": "e2ae1b81964ec43bf7bfab5a",
    	"addrs": []
    }
  app.toml: |
    # This is a TOML config file.
    # For more information, see https://github.com/toml-lang/toml

    ###############################################################################
    ###                           Base Configuration                            ###
    ###############################################################################

    # The minimum gas prices a validator is willing to accept for processing a
    # transaction. A transaction's fees must meet the minimum of any denomination
    # specified in this config (e.g. 0.25token1;0.0001token2).
    minimum-gas-prices = "0.01133uluna,0.15uusd,0.104938usdr,169.77ukrw,428.571umnt,0.125ueur,0.98ucny,16.37ujpy,0.11ugbp,10.88uinr,0.19ucad,0.14uchf,0.19uaud,0.2usgd,4.62uthb,1.25usek"

    # default: the last 100 states are kept in addition to every 500th state; pruning at 10 block intervals
    # nothing: all historic states will be saved, nothing will be deleted (i.e. archiving node)
    # everything: all saved states will be deleted, storing only the current state; pruning at 10 block intervals
    # custom: allow pruning options to be manually specified through 'pruning-keep-recent', 'pruning-keep-every', and 'pruning-interval'
    pruning = "default"

    # These are applied if and only if the pruning strategy is custom.
    pruning-keep-recent = "0"
    pruning-keep-every = "0"
    pruning-interval = "0"

    # HaltHeight contains a non-zero block height at which a node will gracefully
    # halt and shutdown that can be used to assist upgrades and testing.
    #
    # Note: Commitment of state will be attempted on the corresponding block.
    halt-height = 0

    # HaltTime contains a non-zero minimum block time (in Unix seconds) at which
    # a node will gracefully halt and shutdown that can be used to assist upgrades
    # and testing.
    #
    # Note: Commitment of state will be attempted on the corresponding block.
    halt-time = 0

    # MinRetainBlocks defines the minimum block height offset from the current
    # block being committed, such that all blocks past this offset are pruned
    # from Tendermint. It is used as part of the process of determining the
    # ResponseCommit.RetainHeight value during ABCI Commit. A value of 0 indicates
    # that no blocks should be pruned.
    #
    # This configuration value is only responsible for pruning Tendermint blocks.
    # It has no bearing on application state pruning which is determined by the
    # "pruning-*" configurations.
    #
    # Note: Tendermint block pruning is dependant on this parameter in conjunction
    # with the unbonding (safety threshold) period, state pruning and state sync
    # snapshot parameters to determine the correct minimum value of
    # ResponseCommit.RetainHeight.
    min-retain-blocks = 0

    # InterBlockCache enables inter-block caching.
    inter-block-cache = true

    # IndexEvents defines the set of events in the form {eventType}.{attributeKey},
    # which informs Tendermint what to index. If empty, all events will be indexed.
    #
    # Example:
    # ["message.sender", "message.recipient"]
    index-events = []

    ###############################################################################
    ###                         Telemetry Configuration                         ###
    ###############################################################################

    [telemetry]

    # Prefixed with keys to separate services.
    service-name = ""

    # Enabled enables the application telemetry functionality. When enabled,
    # an in-memory sink is also enabled by default. Operators may also enabled
    # other sinks such as Prometheus.
    enabled = false

    # Enable prefixing gauge values with hostname.
    enable-hostname = false

    # Enable adding hostname to labels.
    enable-hostname-label = false

    # Enable adding service to labels.
    enable-service-label = false

    # PrometheusRetentionTime, when positive, enables a Prometheus metrics sink.
    prometheus-retention-time = 0

    # GlobalLabels defines a global set of name/value label tuples applied to all
    # metrics emitted using the wrapper functions defined in telemetry package.
    #
    # Example:
    # [["chain_id", "cosmoshub-1"]]
    global-labels = [
    ]

    ###############################################################################
    ###                           API Configuration                             ###
    ###############################################################################

    [api]

    # Enable defines if the API server should be enabled.
    enable = true

    # Swagger defines if swagger documentation should automatically be registered.
    swagger = true

    # Address defines the API server to listen on.
    address = "tcp://0.0.0.0:1317"

    # MaxOpenConnections defines the number of maximum open connections.
    max-open-connections = 1000

    # RPCReadTimeout defines the Tendermint RPC read timeout (in seconds).
    rpc-read-timeout = 10

    # RPCWriteTimeout defines the Tendermint RPC write timeout (in seconds).
    rpc-write-timeout = 30

    # RPCMaxBodyBytes defines the Tendermint maximum response body (in bytes).
    rpc-max-body-bytes = 1000000

    # EnableUnsafeCORS defines if CORS should be enabled (unsafe - use it at your own risk).
    enabled-unsafe-cors = true

    ###############################################################################
    ###                           Rosetta Configuration                         ###
    ###############################################################################

    [rosetta]

    # Enable defines if the Rosetta API server should be enabled.
    enable = false

    # Address defines the Rosetta API server to listen on.
    address = ":8080"

    # Network defines the name of the blockchain that will be returned by Rosetta.
    blockchain = "app"

    # Network defines the name of the network that will be returned by Rosetta.
    network = "network"

    # Retries defines the number of retries when connecting to the node before failing.
    retries = 3

    # Offline defines if Rosetta server should run in offline mode.
    offline = false

    ###############################################################################
    ###                           gRPC Configuration                            ###
    ###############################################################################

    [grpc]

    # Enable defines if the gRPC server should be enabled.
    enable = true

    # Address defines the gRPC server address to bind to.
    address = "0.0.0.0:9090"

    ###############################################################################
    ###                        gRPC Web Configuration                           ###
    ###############################################################################

    [grpc-web]

    # GRPCWebEnable defines if the gRPC-web should be enabled.
    # NOTE: gRPC must also be enabled, otherwise, this configuration is a no-op.
    enable = true

    # Address defines the gRPC-web server address to bind to.
    address = "0.0.0.0:9091"

    # EnableUnsafeCORS defines if CORS should be enabled (unsafe - use it at your own risk).
    enable-unsafe-cors = true

    ###############################################################################
    ###                        State Sync Configuration                         ###
    ###############################################################################

    # State sync snapshots allow other nodes to rapidly join the network without replaying historical
    # blocks, instead downloading and applying a snapshot of the application state at a given height.
    [state-sync]

    # snapshot-interval specifies the block interval at which local state sync snapshots are
    # taken (0 to disable). Must be a multiple of pruning-keep-every.
    snapshot-interval = 0

    # snapshot-keep-recent specifies the number of recent snapshots to keep and serve (0 to keep all).
    snapshot-keep-recent = 2

    [wasm]
    # The maximum gas amount can be spent for contract query.
    # The contract query will invoke contract execution vm,
    # so we need to restrict the max usage to prevent DoS attack
    contract-query-gas-limit = "3000000"

    # The flag to specify whether print contract logs or not
    contract-debug-mode = "false"

    # The WASM VM memory cache size in MiB not bytes
    contract-memory-cache-size = "500"
  client.toml: |
    # This is a TOML config file.
    # For more information, see https://github.com/toml-lang/toml

    ###############################################################################
    ###                           Client Configuration                            ###
    ###############################################################################

    # The network chain ID
    chain-id = "localterra"
    # The keyring's backend, where the keys are stored (os|file|kwallet|pass|test|memory)
    keyring-backend = "os"
    # CLI output format (text|json)
    output = "text"
    # <host>:<port> to Tendermint RPC interface for this chain
    node = "tcp://localhost:26657"
    # Transaction broadcasting mode (sync|async|block)
    broadcast-mode = "sync"
  config.toml: |
    # This is a TOML config file.
    # For more information, see https://github.com/toml-lang/toml

    # NOTE: Any path below can be absolute (e.g. "/var/myawesomeapp/data") or
    # relative to the home directory (e.g. "data"). The home directory is
    # "$HOME/.tendermint" by default, but could be changed via $TMHOME env variable
    # or --home cmd flag.

    #######################################################################
    ###                   Main Base Config Options                      ###
    #######################################################################

    # TCP or UNIX socket address of the ABCI application,
    # or the name of an ABCI application compiled in with the Tendermint binary
    proxy_app = "tcp://127.0.0.1:26658"

    # A custom human readable name for this node
    moniker = "localterra"

    # If this node is many blocks behind the tip of the chain, FastSync
    # allows them to catchup quickly by downloading blocks in parallel
    # and verifying their commits
    fast_sync = true

    # Database backend: goleveldb | cleveldb | boltdb | rocksdb | badgerdb
    # * goleveldb (github.com/syndtr/goleveldb - most popular implementation)
    #   - pure go
    #   - stable
    # * cleveldb (uses levigo wrapper)
    #   - fast
    #   - requires gcc
    #   - use cleveldb build tag (go build -tags cleveldb)
    # * boltdb (uses etcd's fork of bolt - github.com/etcd-io/bbolt)
    #   - EXPERIMENTAL
    #   - may be faster is some use-cases (random reads - indexer)
    #   - use boltdb build tag (go build -tags boltdb)
    # * rocksdb (uses github.com/tecbot/gorocksdb)
    #   - EXPERIMENTAL
    #   - requires gcc
    #   - use rocksdb build tag (go build -tags rocksdb)
    # * badgerdb (uses github.com/dgraph-io/badger)
    #   - EXPERIMENTAL
    #   - use badgerdb build tag (go build -tags badgerdb)
    db_backend = "goleveldb"

    # Database directory
    db_dir = "data"

    # Output level for logging, including package level options
    log_level = "info"

    # Output format: 'plain' (colored text) or 'json'
    log_format = "plain"

    ##### additional base config options #####

    # Path to the JSON file containing the initial validator set and other meta data
    genesis_file = "config/genesis.json"

    # Path to the JSON file containing the private key to use as a validator in the consensus protocol
    priv_validator_key_file = "config/priv_validator_key.json"

    # Path to the JSON file containing the last sign state of a validator
    priv_validator_state_file = "data/priv_validator_state.json"

    # TCP or UNIX socket address for Tendermint to listen on for
    # connections from an external PrivValidator process
    priv_validator_laddr = ""

    # Path to the JSON file containing the private key to use for node authentication in the p2p protocol
    node_key_file = "config/node_key.json"

    # Mechanism to connect to the ABCI application: socket | grpc
    abci = "socket"

    # If true, query the ABCI app on connecting to a new peer
    # so the app can decide if we should keep the connection or not
    filter_peers = false


    #######################################################################
    ###                 Advanced Configuration Options                  ###
    #######################################################################

    #######################################################
    ###       RPC Server Configuration Options          ###
    #######################################################
    [rpc]

    # TCP or UNIX socket address for the RPC server to listen on
    laddr = "tcp://0.0.0.0:26657"

    # A list of origins a cross-domain request can be executed from
    # Default value '[]' disables cors support
    # Use '["*"]' to allow any origin
    cors_allowed_origins = []

    # A list of methods the client is allowed to use with cross-domain requests
    cors_allowed_methods = ["HEAD", "GET", "POST", ]

    # A list of non simple headers the client is allowed to use with cross-domain requests
    cors_allowed_headers = ["Origin", "Accept", "Content-Type", "X-Requested-With", "X-Server-Time", ]

    # TCP or UNIX socket address for the gRPC server to listen on
    # NOTE: This server only supports /broadcast_tx_commit
    grpc_laddr = "tcp://0.0.0.0:9093"

    # Maximum number of simultaneous connections.
    # Does not include RPC (HTTP&WebSocket) connections. See max_open_connections
    # If you want to accept a larger number than the default, make sure
    # you increase your OS limits.
    # 0 - unlimited.
    # Should be < {ulimit -Sn} - {MaxNumInboundPeers} - {MaxNumOutboundPeers} - {N of wal, db and other open files}
    # 1024 - 40 - 10 - 50 = 924 = ~900
    grpc_max_open_connections = 900

    # Activate unsafe RPC commands like /dial_seeds and /unsafe_flush_mempool
    unsafe = false

    # Maximum number of simultaneous connections (including WebSocket).
    # Does not include gRPC connections. See grpc_max_open_connections
    # If you want to accept a larger number than the default, make sure
    # you increase your OS limits.
    # 0 - unlimited.
    # Should be < {ulimit -Sn} - {MaxNumInboundPeers} - {MaxNumOutboundPeers} - {N of wal, db and other open files}
    # 1024 - 40 - 10 - 50 = 924 = ~900
    max_open_connections = 900

    # Maximum number of unique clientIDs that can /subscribe
    # If you're using /broadcast_tx_commit, set to the estimated maximum number
    # of broadcast_tx_commit calls per block.
    max_subscription_clients = 1000

    # Maximum number of unique queries a given client can /subscribe to
    # If you're using GRPC (or Local RPC client) and /broadcast_tx_commit, set to
    # the estimated # maximum number of broadcast_tx_commit calls per block.
    max_subscriptions_per_client = 1000

    # How long to wait for a tx to be committed during /broadcast_tx_commit.
    # WARNING: Using a value larger than 10s will result in increasing the
    # global HTTP write timeout, which applies to all connections and endpoints.
    # See https://github.com/tendermint/tendermint/issues/3435
    timeout_broadcast_tx_commit = "10s"

    # Maximum size of request body, in bytes
    max_body_bytes = 4194304

    # Maximum size of request header, in bytes
    max_header_bytes = 1048576

    # The path to a file containing certificate that is used to create the HTTPS server.
    # Might be either absolute path or path related to Tendermint's config directory.
    # If the certificate is signed by a certificate authority,
    # the certFile should be the concatenation of the server's certificate, any intermediates,
    # and the CA's certificate.
    # NOTE: both tls_cert_file and tls_key_file must be present for Tendermint to create HTTPS server.
    # Otherwise, HTTP server is run.
    tls_cert_file = ""

    # The path to a file containing matching private key that is used to create the HTTPS server.
    # Might be either absolute path or path related to Tendermint's config directory.
    # NOTE: both tls-cert-file and tls-key-file must be present for Tendermint to create HTTPS server.
    # Otherwise, HTTP server is run.
    tls_key_file = ""

    # pprof listen address (https://golang.org/pkg/net/http/pprof)
    pprof_laddr = "localhost:6060"

    #######################################################
    ###           P2P Configuration Options             ###
    #######################################################
    [p2p]

    # Address to listen for incoming connections
    laddr = "tcp://0.0.0.0:26656"

    # Address to advertise to peers for them to dial
    # If empty, will use the same port as the laddr,
    # and will introspect on the listener or use UPnP
    # to figure out the address.
    external_address = ""

    # Comma separated list of seed nodes to connect to
    seeds = ""

    # Comma separated list of nodes to keep persistent connections to
    persistent_peers = ""

    # UPNP port forwarding
    upnp = false

    # Path to address book
    addr_book_file = "config/addrbook.json"

    # Set true for strict address routability rules
    # Set false for private or local networks
    addr_book_strict = true

    # Maximum number of inbound peers
    max_num_inbound_peers = 40

    # Maximum number of outbound peers to connect to, excluding persistent peers
    max_num_outbound_peers = 10

    # List of node IDs, to which a connection will be (re)established ignoring any existing limits
    unconditional_peer_ids = ""

    # Maximum pause when redialing a persistent peer (if zero, exponential backoff is used)
    persistent_peers_max_dial_period = "0s"

    # Time to wait before flushing messages out on the connection
    flush_throttle_timeout = "100ms"

    # Maximum size of a message packet payload, in bytes
    max_packet_msg_payload_size = 1024

    # Rate at which packets can be sent, in bytes/second
    send_rate = 5120000

    # Rate at which packets can be received, in bytes/second
    recv_rate = 5120000

    # Set true to enable the peer-exchange reactor
    pex = true

    # Seed mode, in which node constantly crawls the network and looks for
    # peers. If another node asks it for addresses, it responds and disconnects.
    #
    # Does not work if the peer-exchange reactor is disabled.
    seed_mode = false

    # Comma separated list of peer IDs to keep private (will not be gossiped to other peers)
    private_peer_ids = ""

    # Toggle to disable guard against peers connecting from the same ip.
    allow_duplicate_ip = false

    # Peer connection configuration.
    handshake_timeout = "20s"
    dial_timeout = "3s"

    #######################################################
    ###          Mempool Configuration Option          ###
    #######################################################
    [mempool]

    recheck = true
    broadcast = true
    wal_dir = ""

    # Maximum number of transactions in the mempool
    size = 5000

    # Limit the total size of all txs in the mempool.
    # This only accounts for raw transactions (e.g. given 1MB transactions and
    # max_txs_bytes=5MB, mempool will only accept 5 transactions).
    max_txs_bytes = 1073741824

    # Size of the cache (used to filter transactions we saw earlier) in transactions
    cache_size = 10000

    # Do not remove invalid transactions from the cache (default: false)
    # Set to true if it's not possible for any invalid transaction to become valid
    # again in the future.
    keep-invalid-txs-in-cache = false

    # Maximum size of a single transaction.
    # NOTE: the max size of a tx transmitted over the network is {max_tx_bytes}.
    max_tx_bytes = 1048576

    # Maximum size of a batch of transactions to send to a peer
    # Including space needed by encoding (one varint per transaction).
    # XXX: Unused due to https://github.com/tendermint/tendermint/issues/5796
    max_batch_bytes = 0

    #######################################################
    ###         State Sync Configuration Options        ###
    #######################################################
    [statesync]
    # State sync rapidly bootstraps a new node by discovering, fetching, and restoring a state machine
    # snapshot from peers instead of fetching and replaying historical blocks. Requires some peers in
    # the network to take and serve state machine snapshots. State sync is not attempted if the node
    # has any local state (LastBlockHeight > 0). The node will have a truncated block history,
    # starting from the height of the snapshot.
    enable = false

    # RPC servers (comma-separated) for light client verification of the synced state machine and
    # retrieval of state data for node bootstrapping. Also needs a trusted height and corresponding
    # header hash obtained from a trusted source, and a period during which validators can be trusted.
    #
    # For Cosmos SDK-based chains, trust_period should usually be about 2/3 of the unbonding time (~2
    # weeks) during which they can be financially punished (slashed) for misbehavior.
    rpc_servers = ""
    trust_height = 0
    trust_hash = ""
    trust_period = "168h0m0s"

    # Time to spend discovering snapshots before initiating a restore.
    discovery_time = "15s"

    # Temporary directory for state sync snapshot chunks, defaults to the OS tempdir (typically /tmp).
    # Will create a new, randomly named directory within, and remove it when done.
    temp_dir = ""

    #######################################################
    ###       Fast Sync Configuration Connections       ###
    #######################################################
    [fastsync]

    # Fast Sync version to use:
    #   1) "v0" (default) - the legacy fast sync implementation
    #   2) "v1" - refactor of v0 version for better testability
    #   2) "v2" - complete redesign of v0, optimized for testability & readability
    version = "v0"

    #######################################################
    ###         Consensus Configuration Options         ###
    #######################################################
    [consensus]

    wal_file = "data/cs.wal/wal"

    # How long we wait for a proposal block before prevoting nil
    timeout_propose = "{{ .Values.block_time }}"
    # How much timeout_propose increases with each round
    timeout_propose_delta = "{{ .Values.block_time }}"
    # How long we wait after receiving +2/3 prevotes for “anything” (ie. not a single block or nil)
    timeout_prevote = "{{ .Values.block_time }}"
    # How much the timeout_prevote increases with each round
    timeout_prevote_delta = "{{ .Values.block_time }}"
    # How long we wait after receiving +2/3 precommits for “anything” (ie. not a single block or nil)
    timeout_precommit = "{{ .Values.block_time }}"
    # How much the timeout_precommit increases with each round
    timeout_precommit_delta = "{{ .Values.block_time }}"
    # How long we wait after committing a block, before starting on the new
    # height (this gives us a chance to receive some more precommits, even
    # though we already have +2/3).
    timeout_commit = "{{ .Values.block_time }}"

    # How many blocks to look back to check existence of the node's consensus votes before joining consensus
    # When non-zero, the node will panic upon restart
    # if the same consensus key was used to sign {double_sign_check_height} last blocks.
    # So, validators should stop the state machine, wait for some blocks, and then restart the state machine to avoid panic.
    double_sign_check_height = 0

    # Make progress as soon as we have all the precommits (as if TimeoutCommit = 0)
    skip_timeout_commit = false

    # EmptyBlocks mode and possible interval between empty blocks
    create_empty_blocks = true
    create_empty_blocks_interval = "0s"

    # Reactor sleep duration parameters
    peer_gossip_sleep_duration = "100ms"
    peer_query_maj23_sleep_duration = "2s"

    #######################################################
    ###   Transaction Indexer Configuration Options     ###
    #######################################################
    [tx_index]

    # What indexer to use for transactions
    #
    # The application will set which txs to index. In some cases a node operator will be able
    # to decide which txs to index based on configuration set in the application.
    #
    # Options:
    #   1) "null"
    #   2) "kv" (default) - the simplest possible indexer, backed by key-value storage (defaults to levelDB; see DBBackend).
    # 		- When "kv" is chosen "tx.height" and "tx.hash" will always be indexed.
    indexer = "kv"

    #######################################################
    ###       Instrumentation Configuration Options     ###
    #######################################################
    [instrumentation]

    # When true, Prometheus metrics are served under /metrics on
    # PrometheusListenAddr.
    # Check out the documentation for the list of available metrics.
    prometheus = false

    # Address to listen for Prometheus collector(s) connections
    prometheus_listen_addr = ":26660"

    # Maximum number of simultaneous connections.
    # If you want to accept a larger number than the default, make sure
    # you increase your OS limits.
    # 0 - unlimited.
    max_open_connections = 3

    # Instrumentation namespace
    namespace = "tendermint"
  genesis.json: |
    {
      "genesis_time": "2021-05-26T10:02:06.396784Z",
      "chain_id": "localterra",
      "initial_height": "1",
      "consensus_params": {
        "block": {
          "max_bytes": "22020096",
          "max_gas": "-1",
          "time_iota_ms": "1000"
        },
        "evidence": {
          "max_age_num_blocks": "100000",
          "max_age_duration": "172800000000000",
          "max_bytes": "1048576"
        },
        "validator": {
          "pub_key_types": [
            "ed25519"
          ]
        },
        "version": {}
      },
      "app_hash": "",
      "app_state": {
        "auth": {
          "params": {
            "max_memo_characters": "256",
            "tx_sig_limit": "7",
            "tx_size_cost_per_byte": "10",
            "sig_verify_cost_ed25519": "590",
            "sig_verify_cost_secp256k1": "1000"
          },
          "accounts": [
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra1dcegyrekltswvyy0xy69ydgxn9x8x32zdtapd8",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra1x46rqay4d3cssq8gxxvqz8xt6nwlz4td20k38v",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra17lmam6zguazs5q5u6z5mmx76uj63gldnse2pdp",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra1757tkx08n0cqrw7p86ny9lnxsqeth0wgp0em95",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra199vw7724lzkwz6lf2hsx04lrxfkz09tg8dlp6r",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra18wlvftxzj6zt0xugy2lr9nxzu402690ltaf4ss",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra1e8ryd9ezefuucd4mje33zdms9m2s90m57878v9",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra17tv2hvwpg0ukqgd2y5ct2w54fyan7z0zxrm2f9",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra1lkccuqgj6sjwjn8gsa9xlklqv4pmrqg9dx2fxc",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra1333veey879eeqcff8j3gfcgwt8cfrg9mq20v6f",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            },
            {
              "@type": "/cosmos.auth.v1beta1.BaseAccount",
              "address": "terra1fmcjjt6yc9wqup2r06urnrd928jhrde6gcld6n",
              "pub_key": null,
              "account_number": "0",
              "sequence": "0"
            }
          ]
        },
        "authz": {
          "authorization": []
        },
        "bank": {
          "params": {
            "send_enabled": [],
            "default_send_enabled": true
          },
          "balances": [
            {
              "address": "terra199vw7724lzkwz6lf2hsx04lrxfkz09tg8dlp6r",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra1x46rqay4d3cssq8gxxvqz8xt6nwlz4td20k38v",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra18wlvftxzj6zt0xugy2lr9nxzu402690ltaf4ss",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra1fmcjjt6yc9wqup2r06urnrd928jhrde6gcld6n",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra1dcegyrekltswvyy0xy69ydgxn9x8x32zdtapd8",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra1333veey879eeqcff8j3gfcgwt8cfrg9mq20v6f",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra1e8ryd9ezefuucd4mje33zdms9m2s90m57878v9",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra17tv2hvwpg0ukqgd2y5ct2w54fyan7z0zxrm2f9",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra1757tkx08n0cqrw7p86ny9lnxsqeth0wgp0em95",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra17lmam6zguazs5q5u6z5mmx76uj63gldnse2pdp",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            },
            {
              "address": "terra1lkccuqgj6sjwjn8gsa9xlklqv4pmrqg9dx2fxc",
              "coins": [
                {
                  "denom": "ueur",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "ukrw",
                  "amount": "1000000000000000000"
                },
                {
                  "denom": "uluna",
                  "amount": "1000000000000000"
                },
                {
                  "denom": "usdr",
                  "amount": "10000000000000000"
                },
                {
                  "denom": "uusd",
                  "amount": "10000000000000000"
                }
              ]
            }
          ],
          "supply": [
            {
              "denom": "ueur",
              "amount": "110000000000000000"
            },
            {
              "denom": "ukrw",
              "amount": "11000000000000000000"
            },
            {
              "denom": "uluna",
              "amount": "11000000000000000"
            },
            {
              "denom": "usdr",
              "amount": "110000000000000000"
            },
            {
              "denom": "uusd",
              "amount": "110000000000000000"
            }
          ],
          "denom_metadata": []
        },
        "capability": {
          "index": "1",
          "owners": []
        },
        "crisis": {
          "constant_fee": {
            "denom": "uluna",
            "amount": "1000"
          }
        },
        "distribution": {
          "params": {
            "community_tax": "0.000000000000000000",
            "base_proposer_reward": "0.010000000000000000",
            "bonus_proposer_reward": "0.040000000000000000",
            "withdraw_addr_enabled": true
          },
          "fee_pool": {
            "community_pool": []
          },
          "delegator_withdraw_infos": [],
          "previous_proposer": "",
          "outstanding_rewards": [],
          "validator_accumulated_commissions": [],
          "validator_historical_rewards": [],
          "validator_current_rewards": [],
          "delegator_starting_infos": [],
          "validator_slash_events": []
        },
        "evidence": {
          "evidence": []
        },
        "feegrant": {
          "allowances": []
        },
        "genutil": {
          "gen_txs": [
            {
              "body": {
                "messages": [
                  {
                    "@type": "/cosmos.staking.v1beta1.MsgCreateValidator",
                    "description": {
                      "moniker": "localterra",
                      "identity": "",
                      "website": "",
                      "security_contact": "",
                      "details": ""
                    },
                    "commission": {
                      "rate": "0.100000000000000000",
                      "max_rate": "0.200000000000000000",
                      "max_change_rate": "0.010000000000000000"
                    },
                    "min_self_delegation": "1",
                    "delegator_address": "terra1dcegyrekltswvyy0xy69ydgxn9x8x32zdtapd8",
                    "validator_address": "terravaloper1dcegyrekltswvyy0xy69ydgxn9x8x32zdy3ua5",
                    "pubkey": {
                      "@type": "/cosmos.crypto.ed25519.PubKey",
                      "key": "/zGmkgCWRFsJLETAzlzYsbu7EHS5HWpaSyR22rlFM68="
                    },
                    "value": {
                      "denom": "uluna",
                      "amount": "1000000"
                    }
                  }
                ],
                "memo": "62cd922a9d9349e790247dadd1e32947450502fb@10.10.20.74:26656",
                "timeout_height": "0",
                "extension_options": [],
                "non_critical_extension_options": []
              },
              "auth_info": {
                "signer_infos": [
                  {
                    "public_key": {
                      "@type": "/cosmos.crypto.secp256k1.PubKey",
                      "key": "An4JQUJX6KTbh6CvqmDLPhe6knWdqfKYjDvkCl2QE1oc"
                    },
                    "mode_info": {
                      "single": {
                        "mode": "SIGN_MODE_DIRECT"
                      }
                    },
                    "sequence": "0"
                  }
                ],
                "fee": {
                  "amount": [],
                  "gas_limit": "200000",
                  "payer": "",
                  "granter": ""
                }
              },
              "signatures": [
                "Xb9hjzkSJus9X6scrJO2RbC2jWie7oMst6bWQuvDBrwFeTXTM7YZD4B6YyOaHep9VRQHONDl3iZqeM1oYw8PQA=="
              ]
            }
          ]
        },
        "gov": {
          "starting_proposal_id": "1",
          "deposits": [],
          "votes": [],
          "proposals": [],
          "deposit_params": {
            "min_deposit": [
              {
                "denom": "uluna",
                "amount": "10000000"
              }
            ],
            "max_deposit_period": "300s"
          },
          "voting_params": {
            "voting_period": "300s"
          },
          "tally_params": {
            "quorum": "0.334000000000000000",
            "threshold": "0.500000000000000000",
            "veto_threshold": "0.334000000000000000"
          }
        },
        "ibc": {
          "client_genesis": {
            "clients": [],
            "clients_consensus": [],
            "clients_metadata": [],
            "params": {
              "allowed_clients": [
                "06-solomachine",
                "07-tendermint"
              ]
            },
            "create_localhost": false,
            "next_client_sequence": "0"
          },
          "connection_genesis": {
            "connections": [],
            "client_connection_paths": [],
            "next_connection_sequence": "0"
          },
          "channel_genesis": {
            "channels": [],
            "acknowledgements": [],
            "commitments": [],
            "receipts": [],
            "send_sequences": [],
            "recv_sequences": [],
            "ack_sequences": [],
            "next_channel_sequence": "0"
          }
        },
        "market": {
          "params": {
            "base_pool": "7000000000000.000000000000000000",
            "pool_recovery_period": "200",
            "min_stability_spread": "0.005000000000000000"
          }
        },
        "mint": {
          "minter": {
            "inflation": "0.130000000000000000",
            "annual_provisions": "0.000000000000000000"
          },
          "params": {
            "mint_denom": "uluna",
            "inflation_rate_change": "0.000000000000000000",
            "inflation_max": "0.200000000000000000",
            "inflation_min": "0.070000000000000000",
            "goal_bonded": "0.670000000000000000",
            "blocks_per_year": "6311520"
          }
        },
        "oracle": {
          "params": {
            "vote_period": "5",
            "vote_threshold": "0.500000000000000000",
            "reward_band": "0.020000000000000000",
            "reward_distribution_window": "5256000",
            "whitelist": [
              {
                "name": "ukrw",
                "tobin_tax": "0.002500000000000000"
              },
              {
                "name": "usdr",
                "tobin_tax": "0.002500000000000000"
              },
              {
                "name": "uusd",
                "tobin_tax": "0.002500000000000000"
              },
              {
                "name": "ueur",
                "tobin_tax": "0.002500000000000000"
              }
            ],
            "slash_fraction": "0.000100000000000000",
            "slash_window": "100800",
            "min_valid_per_window": "0.050000000000000000"
          },
          "feeder_delegations": [],
          "exchange_rates": [],
          "miss_counters": [],
          "aggregate_exchange_rate_prevotes": [],
          "aggregate_exchange_rate_votes": [],
          "tobin_taxes": []
        },
        "params": null,
        "slashing": {
          "params": {
            "signed_blocks_window": "100",
            "min_signed_per_window": "0.500000000000000000",
            "downtime_jail_duration": "600s",
            "slash_fraction_double_sign": "0.050000000000000000",
            "slash_fraction_downtime": "0.010000000000000000"
          },
          "signing_infos": [],
          "missed_blocks": []
        },
        "staking": {
          "params": {
            "unbonding_time": "600s",
            "max_validators": 100,
            "max_entries": 7,
            "historical_entries": 10000,
            "bond_denom": "uluna"
          },
          "last_total_power": "0",
          "last_validator_powers": [],
          "validators": [],
          "delegations": [],
          "unbonding_delegations": [],
          "redelegations": [],
          "exported": false
        },
        "transfer": {
          "port_id": "transfer",
          "denom_traces": [],
          "params": {
            "send_enabled": true,
            "receive_enabled": true
          }
        },
        "treasury": {
          "params": {
            "tax_policy": {
              "rate_min": "0.000500000000000000",
              "rate_max": "0.010000000000000000",
              "cap": {
                "denom": "usdr",
                "amount": "1000000"
              },
              "change_rate_max": "0.000250000000000000"
            },
            "reward_policy": {
              "rate_min": "0.000000000000000000",
              "rate_max": "1.000000000000000000",
              "cap": {
                "denom": "unused",
                "amount": "0"
              },
              "change_rate_max": "0.000000000000000000"
            },
            "seigniorage_burden_target": "0.670000000000000000",
            "mining_increment": "1.070000000000000000",
            "window_short": "4",
            "window_long": "52",
            "window_probation": "12"
          },
          "tax_rate": "0.001000000000000000",
          "reward_weight": "0.050000000000000000",
          "tax_caps": [],
          "tax_proceeds": [],
          "epoch_initial_issuance": [],
          "epoch_states": []
        },
        "upgrade": {},
        "vesting": null,
        "wasm": {
          "params": {
            "max_contract_size": "614400",
            "max_contract_gas": "20000000",
            "max_contract_msg_size": "4096"
          },
          "last_code_id": "0",
          "last_instance_id": "0",
          "codes": [],
          "contracts": []
        }
      }
    }
  node_key.json: '{"priv_key":{"type":"tendermint/PrivKeyEd25519","value":"xkHT1nM10OR4WLbdZNxQzxS5n2XbEUQhrEGS9DSpiS55fPkIkwVyvEqz0Auzv2S9ZcnoVwwAvVjg2uOfy/dlVw=="}}'
  priv_validator_key.json: |-
    {
      "address": "DA0317A8E3251C9AEAA38C34820568DCD030CF3F",
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "/zGmkgCWRFsJLETAzlzYsbu7EHS5HWpaSyR22rlFM68="
      },
      "priv_key": {
        "type": "tendermint/PrivKeyEd25519",
        "value": "Ezohat7exENqW000V7mnCihFsGhfczD2tlbGMwAPi9v/MaaSAJZEWwksRMDOXNixu7sQdLkdalpLJHbauUUzrw=="
      }
    }
kind: ConfigMap
metadata:
  labels:
    app: terrad
  name: terrad-cm0
