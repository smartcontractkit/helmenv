apiVersion: apps/v1
{{ if .Values.db.stateful }}
kind: StatefulSet
{{ else }}
kind: Deployment
{{ end }}
metadata:
  name: {{ .Release.Name }}-node
spec:
  {{ if .Values.db.stateful }}
  serviceName: {{ .Release.Name }}-service
  podManagementPolicy: Parallel
  volumeClaimTemplates:
    - metadata:
        name: postgres
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.db.capacity }}
  {{ end }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-node
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-node
        release: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: 'true'
    spec:
      volumes:
        - name: {{ .Release.Name }}-config-map
          configMap:
            name: {{ .Release.Name }}-cm
      containers:
        - name: chainlink-db
          image: postgres:11.15
          command:
            - docker-entrypoint.sh
          args:
            - "-c"
            - "shared_preload_libraries=pg_stat_statements"
            - "-c"
            - "pg_stat_statements.track=all"
          ports:
            - name: postgres
              containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: chainlink
            - name: POSTGRES_PASSWORD
              value: node
            - name: PGPASSWORD
              value: node
            - name: PGUSER
              value: postgres
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 1
            periodSeconds: 30
          startupProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 20
          resources:
            requests:
              memory: {{ .Values.db.resources.requests.memory }}
              cpu: {{ .Values.db.resources.requests.cpu }}
            limits:
              memory: {{ .Values.db.resources.limits.memory }}
              cpu: {{ .Values.db.resources.limits.cpu }}
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d/init.sql
              name: {{ .Release.Name }}-config-map
              subPath: init.sql
          {{ if .Values.db.stateful }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres
              subPath: postgres-db
          {{ end }}
        - name: node
          image: {{ .Values.chainlink.image.image }}:{{ .Values.chainlink.image.version }}
          imagePullPolicy: Always
          args:
            - node
            - start
            - -d
            - -p
            - /etc/node-secrets-volume/node-password
            - -a
            - /etc/node-secrets-volume/apicredentials
            - --vrfpassword=/etc/node-secrets-volume/apicredentials
          ports:
            - name: access
              containerPort: {{ .Values.chainlink.web_port }}
            - name: p2p
              containerPort: {{ .Values.chainlink.p2p_port }}
          env:
          {{- range $key, $value := .Values.env }}
            {{- if $value }}
            - name: {{ $key | upper}}
              {{- if kindIs "string" $value}}
              value: {{ $value | quote}}
              {{- else }}
              value: {{ $value }}
              {{- end }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: {{ .Release.Name }}-config-map
              mountPath: /etc/node-secrets-volume/
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.chainlink.web_port }}
            initialDelaySeconds: 1
            periodSeconds: 30
          startupProbe:
            httpGet:
              path: /
              port: {{ .Values.chainlink.web_port }}
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 20
          resources:
            requests:
              memory: {{ .Values.chainlink.resources.requests.memory }}
              cpu: {{ .Values.chainlink.resources.requests.cpu }}
            limits:
              memory: {{ .Values.chainlink.resources.limits.memory }}
              cpu: {{ .Values.chainlink.resources.limits.cpu }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
